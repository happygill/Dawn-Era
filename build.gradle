plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}


//setup
group = project.maven_group
archivesBaseName = project.archives_base_name
String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = "${mod_version}" + (buildNumber != null ? ".${buildNumber}" : "") + "+mc${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)


minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dawnera'

            mods {
                dawnera {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dawnera'

            mods {
                dawnera {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dawnera'

            mods {
                dawnera {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dawnera', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dawnera {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "dawnera.refmap.json"

    config "dawnera.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven { // Registrate
        url "http://maven.tterrag.com/"
        allowInsecureProtocol = true
    }
    mavenLocal()

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }

    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }

    maven {
        url "https://cursemaven.com"
    }
}

dependencies {

    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    // minecraft version
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // mod dependencies
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.20:1.11")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.20:4.2')


    implementation(fg.deobf("curse.maven:neat-238372:4580940"))

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-1.20.1-forge:${jei_version}"))
    jarJar(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")) {
        jarJar.ranged(it, '[MC1.20-1.3.3,)')
    }
    jarJar(fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.20:1.11")) {
        jarJar.ranged(it, '[1.11,)')
    }


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "dawnera",
                //"Specification-Vendor": "dawnera authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "dawnera authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jarJar.enable()
reobf {
    jarJar { }
}

tasks.jarJar.finalizedBy('reobfJarJar')